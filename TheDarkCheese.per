(load "TheDarkCheese/starting strategic numbers")
(load "TheDarkCheese/user patch constants")

(defconst extended-dark-age-food-threshold 350)
(defconst extended-dark-age-early-food-threshold 220)
(defconst extended-dark-age-pop-threshold 25)
(defconst extended-dark-age-warning 24)
(defconst minimum-dark-age-population 23)
(defconst extended-dark-age-early-warning 21)

(defconst villager-almost-done-time 20)
(defconst timer-villager-almost-done 1)
(defconst max-villagers 200)

(defconst low-wood-amount 30)
(defconst low-priority-lumber-drop-distance 7)
(defconst high-priority-lumber-drop-distance 4)

(defconst goal-hit-feudal-time 1)
(defconst goal-build-farms 2)
(defconst goal-deprioritize-lumber-camps 3)
(defconst goal-locate-food 4)
(defconst goal-locate-boars 5)
(defconst goal-build-first-mill 6)
(defconst goal-build-first-lumber-camp 7)
(defconst goal-build-first-house 8)
(defconst goal-locate-big-sheep-group 9)
(defconst goal-resume-villager-training 10)
(defconst goal-train-villagers 11)

(defconst not-started -1)
(defconst complete 1)
(defconst failed 2)
(defconst active 3)
(defconst inactive 4)


; Set initial active goals
(defrule 
    (true)
    =>
    
    (set-goal goal-train-villagers active)
    (set-goal goal-resume-villager-training inactive)
    (set-goal goal-build-first-house active)
    (disable-self)
)

; Train villagers
; This happens when food is available, or when extended dark age has been detected
(defrule
    (goal goal-train-villagers active)
    (civilian-population < max-villagers)
    (current-age == dark-age)
    (not (can-research feudal-age))
    (or 
        (goal goal-hit-feudal-time failed)
        (and 
            (population < minimum-dark-age-population)
            (can-train villager)
        )
    ) 
    =>

    (train villager)
)

; Indicate a need to resume villager training
(defrule
    (goal goal-train-villagers active)
    (goal goal-resume-villager-training inactive)
    (up-pending-objects c: villager == 0)
    (not (can-afford-unit villager))
    =>

    (chat-local-to-self "Activate villager training resumption goal")
    (set-goal goal-resume-villager-training active)
)

; Deactivate resume villager training goal
(defrule
    (goal goal-resume-villager-training active)
    (up-pending-objects c: villager > 0)
    =>

    (chat-local-to-self "Deactivate villager training resumption goal")
    (set-goal goal-resume-villager-training inactive)
)

; Return food while trying to resume villager training, particularly from boars
(defrule
    (goal goal-resume-villager-training active)
    =>

    (chat-local-to-self "Forcing food drop from boars")
    (up-drop-resources food > 10)
)

; Complete first mill goal
(defrule
    (building-type-count mill >= 1)
    =>

    (set-goal goal-build-first-mill complete)
    (disable-self)
)


; Build a lumber camp after mill
(defrule
    (goal goal-build-first-mill complete) 
    =>

    (set-goal goal-build-first-lumber-camp active)
    (disable-self)
)


; Build first lumber camp
(defrule
    (goal goal-build-first-lumber-camp active)
    (can-build lumber-camp)
    =>

    (build lumber-camp)
    (disable-self)
)


; Complete build first lumber camp
(defrule
    (building-type-count lumber-camp > 0)
    =>

    (set-goal goal-build-first-lumber-camp complete)
    (set-goal goal-deprioritize-lumber-camps active)
)


; Begin building lumber camps only if really really needed
(defrule
    (goal goal-deprioritize-lumber-camps active) 
    (can-build lumber-camp)
    (dropsite-min-distance wood > low-priority-lumber-drop-distance) 
    =>

    (build lumber-camp)
)


; Start building farms in extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    (or 
        (building-type-count lumber-camp == 1)
        (up-pending-objects c: lumber-camp >= 1)
    )
     =>

    (set-goal goal-build-farms active)
    (disable-self)
)

; Force more hunting for extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    =>

    (set-strategic-number sn-minimum-number-hunters 2)
    (set-strategic-number sn-minimum-boar-hunt-group-size 4)
    (disable-self)
)

; Last-ditch effort to avoid extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    (population >= extended-dark-age-warning)
    =>

    (chat-local-to-self "Attempting late feudal avoidance")
    (up-drop-resources food c: 4)
    (disable-self)
)

; Allow more mill construction in extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    (can-build mill)
    (up-pending-objects c: mill == 0)
    (dropsite-min-distance food > 4)
    (or
        (dropsite-min-distance food < 25)
        (dropsite-min-distance deer-hunting < 25)
    )
    =>

    (build mill)
)


; Stop queueing villagers in extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    =>

    (set-strategic-number sn-enable-training-queue 0)
    (disable-self)
)

; Build farms
(defrule
    (goal goal-build-farms active) 
    (idle-farm-count == 0)
    (can-build farm)
    (wood-amount > 90)
    (up-pending-objects c: farm <= 1)
    =>

    (build farm)
)

; Detect extended dark age
(defrule
    (current-age == dark-age)
    (not (can-research feudal-age))
    (not (up-research-status c: feudal-age >= research-pending))
    (or
        (and
            (food-amount <= extended-dark-age-early-food-threshold)
            (population >= extended-dark-age-early-warning)
        )
        (or 
            (and
                (food-amount <= extended-dark-age-food-threshold)
                (population == extended-dark-age-warning)
            )
            (population >= extended-dark-age-pop-threshold)
        )
    )
    =>

    (set-goal goal-hit-feudal-time failed)
    (chat-local-to-self "Detected extended dark age")
    (build house)
    (disable-self)
)

; Complete first house goal
(defrule
    (building-type-count house > 0)
    =>

    (set-goal goal-build-first-house complete)
    (up-assign-builders c: house c: 1)
    (disable-self)
)

; Find sheep after first house is built
(defrule
    (goal goal-build-first-house complete)
    =>

    (set-goal goal-locate-big-sheep-group active)
    (disable-self)
)

; Complete find sheep goal
(defrule
    (unit-type-count sheep >= 3) 
    =>

    (set-goal goal-locate-big-sheep-group complete)
    (disable-self)
)

; Stop exploring with villagers once sheep are found
(defrule
    (goal goal-locate-big-sheep-group complete)
    =>

    (set-strategic-number sn-number-explore-groups 2)
    (set-strategic-number sn-total-number-explorers 2)
    (set-strategic-number sn-minimum-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-percent-civilian-gatherers 100)
    (set-strategic-number sn-food-gatherer-percentage 100)
    (disable-self)
)

; Build houses in the feudal age
(defrule
    (current-age == feudal-age)
    (population-headroom > 0)
    (housing-headroom <= 2)
    (up-pending-objects c: house == 0)
    =>

    (build house)
)

; Build houses until Feudal threshold or extended dark age
(defrule 
    (current-age == dark-age)
    (population-headroom > 0)
    (housing-headroom <= 2)
    (up-pending-objects c: house == 0)
    (or 
        (building-type-count house < 4 )
        (goal goal-hit-feudal-time failed)
    )
    =>

    (build house)
)


; Build first house with multiple villagers
(defrule
    (goal goal-build-first-house active) 
    => 

    (up-assign-builders c: house c: 3)
    (disable-self)
)


; Research loom if house stuck, food stuck, or population is 25 and can't research feudal
(defrule
    (can-research ri-loom)
    (up-pending-objects c: villager == 0)
    (or
        (not (can-afford-unit villager))
        (or 
            (housing-headroom == 0)
            (and
                (population >= minimum-dark-age-population)
                (and 
                    (current-age == dark-age)
                    (not (can-afford-research feudal-age))
                )
            )
        )
    )
    =>

    (research ri-loom)
    (disable-self)
)


; Build a mill when stuff is too far away or when low on sheep
(defrule
    (building-type-count-total mill == 0)
    (game-time > 30)
    (resource-found food)
    (or 
        (unit-type-count sheep == 0)
        (dropsite-min-distance food > 3)
    )
    =>

    (build mill)
)

; Start wood cutting when needed
(defrule
    (wood-amount <= low-wood-amount)
    =>

    (set-strategic-number sn-maximum-wood-drop-distance 10)
    (set-strategic-number sn-wood-gatherer-percentage 18)
    (disable-self)
)

; Go to Feudal Age
(defrule
    (population >= minimum-dark-age-population)
    (can-research feudal-age)
    (can-afford-research feudal-age)
    (current-age == dark-age) 
    =>

    (research feudal-age)
    (set-goal goal-hit-feudal-time inactive)
)


; Found at least one boar
(defrule
    (dropsite-min-distance live-boar <= hunting-distance)
    =>

    (set-goal goal-locate-boars complete)
    (disable-self)
)

; Enable boar hunting when found
(defrule 
    (goal goal-locate-boars complete)
    (game-time > 90)
    =>

    (set-strategic-number sn-enable-boar-hunting 2)
)

; Force boar hunting if it hasn't started slightly later
(defrule
    (goal goal-locate-boars complete)
    (game-time > 180)
    =>

    (set-strategic-number sn-minimum-number-hunters 1)
    (set-strategic-number sn-minimum-boar-hunt-group-size 4)
)

; Start villager timer if only one in queue and another can't be afforded
(defrule
    (up-pending-objects c: villager == 1)
    (not (can-afford-unit villager))
    (up-timer-status timer-villager-almost-done == timer-disabled)
    =>

    (enable-timer timer-villager-almost-done villager-almost-done-time)
    (chat-local-to-self "Enabling villager timer")
)

; Stop timer if another villager can be trained or is queued
(defrule
    (or
        (up-pending-objects c: villager > 1)
        (can-afford-unit villager)
    )
    (up-timer-status timer-villager-almost-done == timer-running)
    =>

    (disable-timer timer-villager-almost-done)
    (chat-local-to-self "Disabling villager timer")
)

; Return food if needed for a villager soon
(defrule
    (up-pending-objects c: villager == 1)
    (not (can-afford-unit villager))
    (timer-triggered timer-villager-almost-done)
    =>

    (chat-local-to-self "Forcing food drop")
    (disable-timer timer-villager-almost-done)
    (up-drop-resources food c: 5)
)


; Allow deer when initial boars are used up or not found
(defrule
    (or
        (game-time >= 300)
        (and
            (or 
                (dropsite-min-distance live-boar > hunting-distance)
                (dropsite-min-distance live-boar == -1)
            )
            (goal goal-locate-boars complete)
        )
    )
    =>

    (set-strategic-number sn-enable-boar-hunting 1)
    (disable-self)
)