(load "TheDarkCheese/starting strategic numbers")
(load "TheDarkCheese/user patch constants")

(defconst extended-dark-age-time-threshold 750)
(defconst extended-dark-age-food-threshold 400)
(defconst extended-dark-age-early-food-threshold 220)
(defconst extended-dark-age-pop-threshold 25)
(defconst extended-dark-age-warning 24)
(defconst extended-dark-age-early-warning 21)
(defconst minimum-dark-age-population 23)



(defconst dark-age-town-center-task-duration 20)
(defconst timer-town-center-free-soon 1)
(defconst max-villagers 200)

(defconst deer-hunting-distance 6)
(defconst early-farm-limit 5)

(defconst sheep-search-time 400)

(defconst low-wood-amount 30)
(defconst low-priority-lumber-drop-distance 7)
(defconst high-priority-lumber-drop-distance 4)

(defconst goal-hit-feudal-time 1)
(defconst goal-build-farms 2)
(defconst goal-deprioritize-lumber-camps 3)
(defconst goal-locate-food 4)
(defconst goal-locate-boars 5)
(defconst goal-build-first-mill 6)
(defconst goal-build-first-lumber-camp 7)
(defconst goal-build-first-house 8)
(defconst goal-locate-big-sheep-group 9)
(defconst goal-resume-villager-training 10)
(defconst goal-train-villagers 11)
(defconst goal-hunt-boar 12)
(defconst goal-hunt-deer 13)
(defconst goal-build-mill-by-deer 15)
(defconst goal-build-early-farms 16)
(defconst goal-kill-lured-boar 17)
(defconst goal-lure-new-boar 18)
(defconst goal-consume-current-boar 19)
(defconst goal-start-boar-lure 20)
(defconst goal-locate-any-sheep 21)

(defconst not-started -1)
(defconst complete 1)
(defconst failed 2)
(defconst active 3)
(defconst inactive 4)

; Set initial active goals
(defrule 
    (true)
    =>
    
    (set-goal goal-train-villagers active)
    (set-goal goal-resume-villager-training inactive)
    (set-goal goal-build-first-house active)
    (set-goal goal-locate-boars active)
    (set-goal goal-consume-current-boar inactive)
    (set-goal goal-lure-new-boar inactive)
    (set-goal goal-kill-lured-boar inactive)
    (disable-self)
)

; Train villagers
; This happens when food is available, or when extended dark age has been detected
(defrule
    (goal goal-train-villagers active)
    (civilian-population < max-villagers)
    (current-age == dark-age)
    (not
        (and
            (population >= minimum-dark-age-population)
            (can-research feudal-age)
        ) 
    )
    (not
        (and
            (up-research-status c: ri-loom < research-pending)
            (and
                (population == extended-dark-age-pop-threshold)
                (can-research ri-loom)
            )
        )
    )
    =>

    (train villager)
)

; Indicate a need to resume villager training
(defrule
    (goal goal-train-villagers active)
    (goal goal-resume-villager-training inactive)
    (up-pending-objects c: villager == 0)
    (not (can-afford-unit villager))
    =>

    (set-goal goal-resume-villager-training active)
)

; Deactivate resume villager training goal
(defrule
    (goal goal-resume-villager-training active)
    (or
        (up-pending-objects c: villager > 0)
        (up-research-status c: feudal-age >= research-pending)
    )
    =>

    (set-goal goal-resume-villager-training inactive)
)

; Return food while trying to resume villager training, particularly from hunting
(defrule
    (goal goal-resume-villager-training active)
    =>

    (up-drop-resources food > 10)
)

; Complete first mill goal
(defrule
    (building-type-count mill >= 1)
    =>

    (set-goal goal-build-first-mill complete)
    (disable-self)
)


; Build a lumber camp after mill
(defrule
    (goal goal-build-first-mill complete) 
    =>

    (set-goal goal-build-first-lumber-camp active)
    (disable-self)
)


; Build first lumber camp
(defrule
    (goal goal-build-first-lumber-camp active)
    (can-build lumber-camp)
    =>

    (build lumber-camp)
    (disable-self)
)


; Complete build first lumber camp
(defrule
    (building-type-count lumber-camp > 0)
    =>

    (set-goal goal-build-first-lumber-camp complete)
    (set-goal goal-deprioritize-lumber-camps active)
)


; Begin building lumber camps only if really really needed
(defrule
    (goal goal-deprioritize-lumber-camps active) 
    (can-build lumber-camp)
    (dropsite-min-distance wood > low-priority-lumber-drop-distance) 
    =>

    (build lumber-camp)
)


; Start building farms when not competing with mills for wood
(defrule
    (or
        (goal goal-hunt-deer complete)
        (not (goal goal-build-mill-by-deer active))
    )
    (goal goal-hunt-boar complete)
    (goal goal-build-first-lumber-camp complete)
     =>

    (set-goal goal-build-early-farms active)
    (disable-self)
)

; Stop building early farms
(defrule
    (goal goal-build-early-farms active)
    (unit-type-count-total farm >= early-farm-limit)
    =>

    (set-goal goal-build-early-farms inactive)
    (disable-self)
)

; Determine if farms should be built
(defrule
    (or
        (goal goal-build-early-farms active)
        (goal goal-hunt-deer complete)
    )
    =>

    (set-goal goal-build-farms active)
)

; Turn off farms
(defrule
    (nor
        (goal goal-build-early-farms active)
        (goal goal-hunt-deer complete)
    )
    =>

    (set-goal goal-build-farms inactive)
)

; Build farms
(defrule
    (goal goal-build-farms active) 
    (idle-farm-count == 0)
    (can-build farm)
    (wood-amount > 90)
    (up-pending-objects c: farm <= 1)
    =>

    (build farm)
)

; Last-ditch effort to avoid extended dark age
(defrule
    (goal goal-hit-feudal-time failed)
    (population >= extended-dark-age-warning)
    (timer-triggered timer-town-center-free-soon)
    =>

    (up-drop-resources food c: 10)
    (disable-self)
)

; Stop queueing villagers when close to feudal threshold
(defrule
    (population >= minimum-dark-age-population)
    =>

    (set-strategic-number sn-enable-training-queue 0)
    (disable-self)
)

; Detect extended dark age
(defrule
    (current-age == dark-age)
    (not (can-research feudal-age))
    (not (up-research-status c: feudal-age >= research-pending))
    (or
        (and
            (food-amount <= extended-dark-age-early-food-threshold)
            (population >= extended-dark-age-early-warning)
        )
        (or 
            (and
                (food-amount <= extended-dark-age-food-threshold)
                (population == extended-dark-age-warning)
            )
            (or
                (population >= extended-dark-age-pop-threshold)
                (game-time > extended-dark-age-time-threshold)
            )
        )
    )
    =>

    (set-goal goal-hit-feudal-time failed)
    (chat-local-to-self "Detected extended dark age")
    (disable-self)
)

; Complete first house goal
(defrule
    (building-type-count house > 0)
    =>

    (set-goal goal-build-first-house complete)
    (up-assign-builders c: house c: 1)
    (disable-self)
)

; Find sheep after first house is built
(defrule
    (goal goal-build-first-house complete)
    =>

    (set-goal goal-locate-any-sheep active)
    (set-goal goal-locate-big-sheep-group active)
    (disable-self)
)

; Complete find big sheep group goal
(defrule
    (or
        (unit-type-count sheep >= 3) 
        (game-time >= sheep-search-time)
    )
    =>

    (set-goal goal-locate-any-sheep complete)
    (set-goal goal-locate-big-sheep-group complete)
    (disable-self)
)

; Complete find any sheep goal
(defrule
    (unit-type-count sheep >= 1)
    =>

    (set-goal goal-locate-any-sheep complete)
    (disable-self)
)

; Reduce number of villager explorers once some sheep are available
(defrule
    (goal goal-locate-any-sheep complete)
    =>

    (set-strategic-number sn-number-explore-groups 2)
    (set-strategic-number sn-total-number-explorers 2)
    (set-strategic-number sn-minimum-civilian-explorers 1)
    (set-strategic-number sn-cap-civilian-explorers 1)
    (set-strategic-number sn-percent-civilian-gatherers 100)
    (set-strategic-number sn-food-gatherer-percentage 100)
    (disable-self)
)

; Stop exploring with villagers once many sheep are found
(defrule
    (goal goal-locate-big-sheep-group complete)
    =>

    (set-strategic-number sn-number-explore-groups 2)
    (set-strategic-number sn-total-number-explorers 2)
    (set-strategic-number sn-minimum-civilian-explorers 0)
    (set-strategic-number sn-cap-civilian-explorers 0)
    (set-strategic-number sn-percent-civilian-gatherers 100)
    (set-strategic-number sn-food-gatherer-percentage 100)
    (disable-self)
)

; Build houses in the feudal age
(defrule
    (current-age == feudal-age)
    (population-headroom > 0)
    (housing-headroom <= 2)
    (up-pending-objects c: house == 0)
    =>

    (build house)
)

; Build houses until Feudal threshold or extended dark age
(defrule 
    (current-age == dark-age)
    (population-headroom > 0)
    (housing-headroom <= 2)
    (up-pending-objects c: house == 0)
    (or 
        (building-type-count house < 4 )
        (goal goal-hit-feudal-time failed)
    )
    =>

    (build house)
)

; Build first house with multiple villagers
(defrule
    (goal goal-build-first-house active) 
    => 

    (up-assign-builders c: house c: 3)
    (disable-self)
)

; Research loom if house stuck, food stuck, or population is 25 and can't research feudal
(defrule
    (can-research ri-loom)
    (not (can-research feudal-age))
    (up-pending-objects c: villager == 0)
    (or
        (not (can-afford-unit villager))
        (or 
            (housing-headroom == 0)
            (and
                (population >= minimum-dark-age-population)
                (and 
                    (current-age == dark-age)
                    (not (can-afford-research feudal-age))
                )
            )
        )
    )
    =>

    (enable-timer timer-town-center-free-soon dark-age-town-center-task-duration)
    (research ri-loom)
    (disable-self)
)

; Build a mill when stuff is too far away or when low on sheep
(defrule
    (building-type-count-total mill == 0)
    (game-time > 30)
    (resource-found food)
    (or 
        (unit-type-count sheep == 0)
        (dropsite-min-distance food > 3)
    )
    =>

    (build mill)
    (disable-self)
)

; Start wood cutting when needed
(defrule
    (wood-amount <= low-wood-amount)
    =>

    (set-strategic-number sn-maximum-wood-drop-distance 10)
    (set-strategic-number sn-wood-gatherer-percentage 20)
    (set-strategic-number sn-food-gatherer-percentage 80)
    (disable-self)
)

; Go to Feudal Age
(defrule
    (population >= minimum-dark-age-population)
    (can-research feudal-age)
    (current-age == dark-age) 
    =>

    (research feudal-age)
    (set-goal goal-hit-feudal-time inactive)
    (disable-self)
)

; Found at least one boar
(defrule
    (not (dropsite-min-distance live-boar == -1))
    (dropsite-min-distance live-boar <= hunting-distance)
    =>

    (chat-local-to-self "Found boar")
    (set-goal goal-locate-boars complete)
    (disable-self)
)

; Enable boar hunting when found
(defrule 
    (goal goal-locate-boars complete)
    (game-time > 120)
    =>

    (set-strategic-number sn-enable-boar-hunting 2)
    (disable-self)
)

; Force boar hunting when population is high enough
(defrule
    (goal goal-locate-boars complete)
    (population >= 11)
    =>

    (set-goal goal-hunt-boar active)
    (disable-self)
)

; Determine if new boar should be fetched
(defrule
    (goal goal-hunt-boar active)
    (goal goal-consume-current-boar inactive)
    (goal goal-lure-new-boar inactive)
    =>

    (set-goal goal-lure-new-boar active)
    (set-goal goal-start-boar-lure active)
)

; Go get a boar if requested
(defrule
    (goal goal-lure-new-boar active)
    (goal goal-start-boar-lure active)
    =>

    (chat-local-to-self "Initiating boar lure")
    (set-strategic-number sn-minimum-number-hunters 1)
    (set-goal goal-start-boar-lure inactive)
)

; Send more hunters when boar is close to the town center
(defrule
    (goal goal-lure-new-boar active)
    (goal goal-kill-lured-boar inactive)
    (dropsite-min-distance live-boar <= 6)
    =>

    (chat-local-to-self "Calling for more boar killers")
    (set-goal goal-kill-lured-boar active)
    (set-strategic-number sn-minimum-number-hunters 6)
)

; Finish luring portion of hunting
(defrule
    (goal goal-lure-new-boar active)
    (goal goal-kill-lured-boar active)
    (up-remaining-boar-amount > 0)
    =>

    (chat-local-to-self "Confirmed boar kill")
    (set-goal goal-consume-current-boar active)
    (set-goal goal-lure-new-boar inactive)
    (set-goal goal-kill-lured-boar inactive)
)

; Detect when ready for new boar
(defrule
    (goal goal-consume-current-boar active)
    (not (up-remaining-boar-amount >= 0))
    =>

    (chat-local-to-self "Boar consumption complete")
    (set-goal goal-consume-current-boar inactive)
    (set-strategic-number sn-minimum-number-hunters 0)
)

; Start villager timer if only one in queue and another can't be afforded, or loom is being researched
(defrule
    (or
        (up-pending-objects c: villager == 1)
        (up-research-status c: ri-loom == research-pending)
    )
    (not (can-afford-unit villager))
    (up-timer-status timer-town-center-free-soon == timer-disabled)
    =>

    (enable-timer timer-town-center-free-soon dark-age-town-center-task-duration)
)

; Stop timer if another villager can be trained or is queued
(defrule
    (or
        (up-pending-objects c: villager > 1)
        (can-afford-unit villager)
    )
    (up-timer-status timer-town-center-free-soon == timer-running)
    =>

    (disable-timer timer-town-center-free-soon)
)

; Return food if needed for a villager soon
(defrule
    (up-pending-objects c: villager == 1)
    (not (can-afford-unit villager))
    (timer-triggered timer-town-center-free-soon)
    =>

    (disable-timer timer-town-center-free-soon)
    (up-drop-resources food c: 5)
)

; Give up on boars after a while
(defrule
    (not (goal goal-locate-boars complete))
    (game-time >= 510)
    =>

    (chat-local-to-self "Locate boars failed")
    (set-goal goal-locate-boars failed)
    (disable-self)
)

; Declare boar hunting complete when boars are used up or not found
(defrule
    (or
        (dropsite-min-distance boar-hunting > hunting-distance)
        (dropsite-min-distance boar-hunting == -1)
    )
    (or
        (goal goal-locate-boars complete)
        (goal goal-locate-boars failed)
    )
    =>

    (chat-local-to-self "Boar hunting complete")
    (set-goal goal-hunt-boar complete)
    (disable-self)
)

; Hunt deer when boars are exhausted
(defrule
    (or
        (goal goal-hunt-boar complete)
        (goal goal-locate-boars failed)
    )
    =>

    (chat-local-to-self "Activating deer hunting")
    (set-goal goal-hunt-deer active)
    (disable-self)
)

; Allow deer hunting
(defrule
    (goal goal-hunt-deer active)
    =>

    (chat-local-to-self "Allowing deer hunting")
    (set-strategic-number sn-minimum-number-hunters 10)
    (set-strategic-number sn-retask-gather-amount 140)
    (disable-self)
)

; Build mill by deer if needed
(defrule
    (goal goal-hunt-deer active)
    (or
        (goal goal-build-mill-by-deer not-started)
        (goal goal-build-mill-by-deer inactive)
    )
    (dropsite-min-distance deer-hunting > deer-hunting-distance)
    =>

    (set-goal goal-build-mill-by-deer active)
)

; Mark deer hunting complete when no deer remain
(defrule
    (or
        (dropsite-min-distance deer-hunting > hunting-distance)
        (dropsite-min-distance deer-hunting == -1)
    )
    (goal goal-hunt-deer active)
    =>

    (set-goal goal-hunt-deer complete)
    (chat-local-to-self "Completed deer hunting")
    (disable-self)
)

; Allow more mill construction for hunting
(defrule
    (goal goal-build-mill-by-deer active)
    (can-build mill)
    (up-pending-objects c: mill == 0)
    =>

    (set-strategic-number sn-preferred-mill-placement 1)
    (build mill)
)

; Deactivate build mill by deer
(defrule
    (goal goal-build-mill-by-deer active)
    (dropsite-min-distance deer-hunting <= deer-hunting-distance)
    =>

    (set-strategic-number sn-enable-boar-hunting 1)
    (set-goal goal-build-mill-by-deer inactive)
)
